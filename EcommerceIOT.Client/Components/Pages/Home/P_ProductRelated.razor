
<div class="product-tab z-index-20 sm-margin-top-193px xs-margin-top-30px">
    <div class="container">
        <div class="biolife-title-box">
            <h3 class="main-title">Sản phẩm nổi bật</h3>
        </div>
        <div class="biolife-tab biolife-tab-contain sm-margin-top-34px">
            <div class="tab-content">
                <div id="tab01_1st" class="tab-contain active">
                    <ul class="products-list biolife-carousel nav-center-02 nav-none-on-mobile eq-height-contain" data-slick='{"rows":2 ,"arrows":true,"dots":false,"infinite":true,"speed":400,"slidesMargin":10,"slidesToShow":4, "responsive":[{"breakpoint":1200, "settings":{ "slidesToShow": 4}},{"breakpoint":992, "settings":{ "slidesToShow": 3, "slidesMargin":25 }},{"breakpoint":768, "settings":{ "slidesToShow": 2, "slidesMargin":15}}]}'>
                        @if(products != null && products.Any())
                        {
                            @foreach (var item in products)
                            {

                                @if(item.IsHot == true)
                                {
                                    <li class="product-item">
                                        <div class="contain-product layout-default">
                                            <div class="product-thumb">
                                                <a onclick="window.location.href='/san-pham/@item.NameSlug/@item.Id';" class="link-to-product">
                                                    <img src="@(string.IsNullOrEmpty(item.ImageFilePath) ? "/Img_Dev/banner.png" : item.ImageFilePath)" alt="Vegetables" width="270" height="270" class="product-thumnail">
                                                </a>
                                            </div>
                                            <div class="info">
                                                <b class="categories">@item.CategoryName</b>
                                                <h4 class="product-title"><a onclick="window.location.href='/san-pham/@item.NameSlug/@item.Id';" class="pr-name">@item.Name</a></h4>
                                                <div class="price ">
                                                    <ins><span class="price-amount"><span class="currencySymbol"></span>@((item.Price - item.Discount).ToString("N0"))đ</span></ins>
                                                    <del><span class="price-amount"><span class="currencySymbol"></span>@item.Discount.ToString("N0") đ</span></del>
                                                </div>
                                                <div class="slide-down-box">
                                                    <div class="buttons">
                                                        <a onclick="window.location.href='/san-pham/@item.NameSlug/@item.Id';" class="btn add-to-cart-btn"><i class="fa fa-cart-arrow-down" aria-hidden="true"></i>Xem</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                }
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<ProductDto> products;
    private int currentPage = 1;
    private int pageSize = 9;
    private int totalPages;
    private int totalCount;
    private int? type;

    private Guid? categoryId = null;
    private decimal? minPrice = null;
    private decimal? maxPrice = null;
    private string? keyword = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadListProducts();
    }

    private async Task LoadListProducts()
    {
        var response = await _productServices.GetListProductAsync(currentPage, pageSize, minPrice, maxPrice, categoryId, keyword, type);
        if (response != null && response.Success)
        {
            products = response.Data.Products;
        }
        else
        {
            products = new List<ProductDto>();
        }
    }
}