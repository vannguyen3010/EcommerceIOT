@page "/gio-hang"
@rendermode InteractiveServer
<link href="css/cart.css" rel="stylesheet" />

<div id="content" class="container site-content sidebar-full">
    <div id="primary" class="content-area">
        <main id="main" class="site-main">
            <article id="post-9" class="post-9 page type-page status-publish hentry">
                <div class="entry-content">
                    <div class="woocommerce">
                        <div class="woocommerce-notices-wrapper"></div><form class="woocommerce-cart-form" action="https://new-biolife.kutethemes.net/cart/" method="post">
                            <table class="shop_table shop_table_responsive cart woocommerce-cart-form__contents" cellspacing="0" style="border: none;">
                                <thead><tr><th class="product-remove"><span class="screen-reader-text">Remove item</span></th><th class="product-thumbnail"><span class="screen-reader-text">Thumbnail image</span></th><th class="product-name">Tên SP</th><th class="product-price">Giá</th><th class="product-quantity">Số lượng</th><th class="product-subtotal">Tổng</th></tr></thead>
                                <tbody>
                                    @if (carts != null && carts.Any())
                                    {
                                        @foreach (var item in carts)
                                        {
                                            <tr class="woocommerce-cart-form__cart-item cart_item">
                                                <td class="product-remove">
                                                    <a href="javascript:void(0)" @onclick="() => DeleteCartItem(item.ProductId)" class="remove">×</a>
                                                </td>
                                                <td class="product-thumbnail">
                                                    <a><img width="800" height="800" src="@(string.IsNullOrEmpty(item.ImageFilePath) ? "/Img_Dev/banner.png" : item.ImageFilePath)" class="attachment-120 size-120 wp-post-image" alt="" sizes="(max-width: 800px) 100vw, 800px"></a>
                                                </td>
                                                <td class="product-name">
                                                    <a>@item.Name</a>
                                                </td>
                                                <td class="product-price">
                                                    <span class="woocommerce-Price-amount amount"><bdi><span class="woocommerce-Price-currencySymbol"></span>@((item.Price - item.Discount).ToString("N0")) đ</bdi></span>
                                                </td>
                                                <td class="product-quantity" data-title="Quantity">
                                                    <div class="quantity">
                                                        <a href="javascript:void(0)" class="arrow minus quantity-minus" @onclick="() => DecreaseQuantity(item)"></a>
                                                        <input type="number" class="input-text qty text" value="@item.Quantity" @onchange="(e) => OnQuantityInputChanged(item, e.Value.ToString())">
                                                        <a href="javascript:void(0)" class="arrow plus quantity-plus" @onclick="() => IncreaseQuantity(item)"></a>
                                                    </div>
                                                </td>
                                                <td class="product-subtotal" data-title="Subtotal">
                                                    <span class="woocommerce-Price-amount amount"><bdi><span class="woocommerce-Price-currencySymbol"></span>@item.FinalPrice.ToString("N0") đ</bdi></span>
                                                </td>
                                            </tr>
                                        }
                                    }
                                  
                                </tbody>
                            </table>
                        </form><div class="cart-collaterals">
                            <div class="cart_totals ">
                                <h2>Tổng tiền hàng</h2><table cellspacing="0" class="shop_table shop_table_responsive" style="border: none;">
                                    <tbody>
                                        <tr class="order-total"><th>Tổng tiền</th><td data-title="Total"><strong><span class="woocommerce-Price-amount amount"><bdi><span class="woocommerce-Price-currencySymbol"></span>@totalPrice.ToString("N0") đ</bdi></span></strong></td></tr>
                                    </tbody>
                                </table><div class="wc-proceed-to-checkout">
                                    <a onclick="window.location.href='/thanh-toan';" class="checkout-button button alt wc-forward">
                                        Mua hàng
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </article>
        </main>
    </div>
</div>


@code {
    private IEnumerable<CartItemDto> carts = new List<CartItemDto>();
    private string message;
    private string errorMessage;
    private decimal totalPrice;
    private bool isRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isRendered)
        {
            isRendered = false; // Đảm bảo LoadListCarts chỉ gọi một lần khi render
            await LoadListCarts();
        }
    }

    private async Task LoadListCarts()
    {
        var userId = await localStorage.GetItemAsync<string>("userId");
        if (string.IsNullOrEmpty(userId))
        {
            message = "Vui lòng đăng nhập để mua hàng.";
            return;
        }

        var response = await _cartServices.GetCartAsync(userId);
        if (response != null && response.Success)
        {
            carts = response.Data.Items;
            totalPrice = response.Data.TotalPrice;
        }
        else
        {
            carts = new List<CartItemDto>();
            message = response?.Message ?? "Lỗi khi lấy giỏ hàng.";
        }
        StateHasChanged();
    }

    private void OnQuantityInputChanged(CartItemDto item, string inputValue)
    {
        // Chuyển đổi giá trị nhập từ input sang kiểu số nguyên
        if (int.TryParse(inputValue, out int quantity))
        {
            if (quantity < 1)
            {
                item.Quantity = 1; // Đảm bảo số lượng ít nhất là 1
                errorMessage = $"Số lượng sản phẩm phải lớn hơn hoặc bằng 1";
            }
            else
            {
                item.Quantity = quantity; // Gán số lượng nhập nếu hợp lệ
                errorMessage = null; // Xóa thông báo lỗi nếu nhập đúng
            }
            UpdateCartItemQuantity(item.ProductId, item.Quantity);
        }
        else
        {
            item.Quantity = 1;
        }
    }

    private async Task UpdateCartItemQuantity(Guid productId, int quantity)
    {
        if (quantity < 1)
        {
            quantity = 1;
        }

        var userId = await localStorage.GetItemAsync<string>("userId");

        var request = new UpdateCartItemDto
            {
                ProductId = productId,
                UserId = userId,
                Quantity = quantity
            };

        var response = await _cartServices.UpdateCartItemQuantityAsync(request);
        if (response != null && response.Success)
        {
            await LoadListCarts();
        }
        else
        {
            message = response?.Message ?? "Lỗi khi cập nhật số lượng.";
        }

        StateHasChanged();
    }

    private void IncreaseQuantity(CartItemDto item)
    {
        item.Quantity++;
        UpdateCartItemQuantity(item.ProductId, item.Quantity);
        errorMessage = null;
    }
    private void DecreaseQuantity(CartItemDto item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            UpdateCartItemQuantity(item.ProductId, item.Quantity);
            errorMessage = null;
        }
    }

    private async Task DeleteCartItem(Guid productId)
    {
        var userId = await localStorage.GetItemAsync<string>("userId");
        if (string.IsNullOrEmpty(userId))
        {
            message = "Bạn cần đăng nhập để thực hiện thao tác này.";
            return;
        }

        var response = await _cartServices.DeleteFromCartAsync(userId, productId);

        if (response.Success)
        {
            message = response.Message;
            await LoadListCarts();
        }
        else
        {
            message = response.Message;
        }
    }
}