@page "/dashboard"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="card bg-dark" style="opacity: 0.5; margin-top: 50%;border-radius:10px;color:white;font-weight:bold">
                    <div class="card-header text-center fs-5 mb-2">Login</div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.Password" class="form-control" />
                        </div>
                        <div class="form-group mt-3">
                            <button class="btn btn-outline-primary float-end" type="submit">Login</button>
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don't have account |
                            <a class="btn-link" href="identity/account/register">Sign Up</a>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-3"></div>
    </div>
</div>

@code{
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    LoginDto User = new();
    private RegisterDto registerDto = new RegisterDto();
    private string? _errorMessage;

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin()
    {
        var result = await _accountServices.LoginAsync(User);
        if (result.IsAuthSuccessful)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new AuthResponseDto() { Token = result.Token });
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavigationManager.NavigateTo("/dashboard");
    }
}